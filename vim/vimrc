syntax on
set fileformat=unix
set nocompatible
" 改行毎バックスペース
set backspace=indent,eol,start
set laststatus=2
set t_Co=256
set nohlsearch
" 行表示
set number
" ラインハイライト
set cursorline
set cursorcolumn
" バックアップ
set backup
set writebackup
set backupdir=~/backup

set ttymouse=xterm
"set mouse=a

set history=100
set showmatch
set hlsearch

"スペース タブ三重

"色
highlight Comment ctermfg=03
highlight Search ctermfg=44
highlight Number ctermfg=01
highlight LineNr ctermfg=02
highlight CursorColumn ctermbg=244

inoremap {<Enter> {}<Left><CR><ESC><S-o>
inoremap [<Enter> []<Left><CR><ESC><S-o>
inoremap (<Enter> ()<Left><CR><ESC><S-o>
set tabstop=2
set autoindent
set expandtab
set shiftwidth=2

nnoremap  <C-a> :set paste<Esc>
nnoremap  <C-i> :set nopaste<Esc>

 if !1 | finish | endif

 if has('vim_starting')
   set nocompatible

   set runtimepath+=~/.vim/bundle/neobundle.vim/
 endif

   call neobundle#begin(expand('~/.vim/bundle/'))

   NeoBundleFetch 'Shougo/neobundle.vim'
   NeoBundle 'itchyny/lightline.vim'
   NeoBundle 'Shougo/unite.vim'
   NeoBundle 'Shougo/vimfiler'
   NeoBundle 'Shougo/vimproc'
   NeoBundle 'Shougo/vimshell'

   call neobundle#end()
 NeoBundleCheck

filetype on
filetype plugin indent on
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim
filetype plugin indent on
syntax on
autocmd FileType go autocmd BufWritePre <buffer> Fmt
exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
set completeopt=menu,preview

function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ

map + <C-W>+
map - <C-W>-
map < <C-W><
map > <C-W>>

